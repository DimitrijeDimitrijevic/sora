openapi: 3.0.3
info:
  title: Sora HTTP API
  description: HTTP API for managing and monitoring the Sora mail server.
  version: v1
servers:
  - url: /admin/v1
    description: Admin API version 1

# Security scheme definition
components:
  securitySchemes:
    ApiKeyAuth:
      type: http
      scheme: bearer
      bearerFormat: API Key
      description: "API Key for authentication. Provide as 'Bearer <API_KEY>' in the Authorization header."

  # Reusable schemas
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "An error message"
      required:
        - error

    CreateAccountRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          description: "Plain text password for the account. Cannot be used together with password_hash."
          example: "s3cr3t_p4ssw0rd"
        password_hash:
          type: string
          description: "Pre-computed password hash (bcrypt, SSHA512, etc.). Cannot be used together with password."
          example: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewtsJh.2gUOhvY66"
      required:
        - email
      anyOf:
        - required: ["password"]
        - required: ["password_hash"]

    CreateCredentialSpec:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        password_hash:
          type: string
        is_primary:
          type: boolean
        hash_type:
          type: string
          description: "Password hash type (bcrypt, ssha512, sha512). Defaults to bcrypt if not provided."
      required:
        - email
        - is_primary
      anyOf:
        - required: ["password"]
        - required: ["password_hash"]

    UpdateAccountRequest:
      type: object
      properties:
        password:
          type: string
          format: password
          description: "New plain text password for the account. Cannot be used together with password_hash."
          example: "new_s3cr3t_p4ssw0rd"
        password_hash:
          type: string
          description: "Pre-computed password hash (bcrypt, SSHA512, etc.). Cannot be used together with password."
          example: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewtsJh.2gUOhvY66"
      anyOf:
        - required: ["password"]
        - required: ["password_hash"]

    AddCredentialRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: "The new email address (alias) to add as a credential."
          example: "alias@example.com"
        password:
          type: string
          format: password
          description: "Plain text password for the new credential. It can be different from the primary account's password. Cannot be used together with password_hash."
          example: "s3cr3t_p4ssw0rd_for_alias"
        password_hash:
          type: string
          description: "Pre-computed password hash (bcrypt, SSHA512, etc.) for the new credential. Cannot be used together with password."
          example: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewtsJh.2gUOhvY66"
      required:
        - email
      anyOf:
        - required: ["password"]
        - required: ["password_hash"]

    KickConnectionsRequest:
      type: object
      properties:
        user_email:
          type: string
          format: email
          description: "Terminate all connections for this user."
          example: "user@example.com"
        protocol:
          type: string
          description: "Terminate connections for this protocol (e.g., IMAP, POP3)."
          example: "IMAP"
        server_addr:
          type: string
          description: "Terminate connections to this backend server address."
          example: "10.0.1.10:143"
        client_addr:
          type: string
          description: "Terminate connections from this client IP address."
          example: "192.168.1.100"
        all:
          type: boolean
          description: "If true, terminates all connections. Use with caution."
          example: false

    Account:
      type: object
      properties:
        account_id:
          type: integer
          format: int64
          example: 123
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          example: null
        primary_email:
          type: string
          format: email
          example: "user@example.com"
        status:
          type: string
          enum: [active, deleted]
          example: "active"
        credentials:
          type: array
          items:
            type: object
            properties:
              address:
                type: string
                format: email
                example: "user@example.com"
              primary_identity:
                type: boolean
                example: true
              created_at:
                type: string
                format: date-time
                example: "2023-01-01T12:00:00Z"
              updated_at:
                type: string
                format: date-time
                example: "2023-01-01T12:00:00Z"
        mailbox_count:
          type: integer
          format: int64
          example: 5
        message_count:
          type: integer
          format: int64
          example: 42

    AccountExists:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        exists:
          type: boolean
          example: true

    ConnectionInfo:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        AccountID:
          type: integer
          format: int64
        Protocol:
          type: string
          example: "IMAP"
        ClientAddr:
          type: string
          example: "192.168.1.100:54321"
        ServerAddr:
          type: string
          example: "10.0.1.10:143"
        InstanceID:
          type: string
          example: "sora-instance-1"
        ConnectedAt:
          type: string
          format: date-time
        LastActivity:
          type: string
          format: date-time
        ShouldTerminate:
          type: boolean
        Email:
          type: string
          format: email
          example: "user@example.com"

    ConnectionStats:
      type: object
      properties:
        TotalConnections:
          type: integer
          format: int64
        ConnectionsByProtocol:
          type: object
          additionalProperties:
            type: integer
            format: int64
          example:
            IMAP: 50
            POP3: 10
        ConnectionsByServer:
          type: object
          additionalProperties:
            type: integer
            format: int64
          example:
            "10.0.1.10:143": 30
            "10.0.1.11:143": 30
        Users:
          type: array
          items:
            $ref: '#/components/schemas/ConnectionInfo'

    CacheStats:
      type: object
      properties:
        total_size:
          type: integer
          format: int64
          description: "Total size of items in cache (bytes)."
        items:
          type: integer
          format: int64
          description: "Number of items in cache."
        hits:
          type: integer
          format: int64
        misses:
          type: integer
          format: int64
        hit_rate:
          type: number
          format: float
        capacity:
          type: integer
          format: int64
          description: "Total cache capacity (bytes)."
        path:
          type: string
          description: "Path to the cache directory."

    CacheMetricsRecord:
      type: object
      properties:
        instance_id:
          type: string
        server_hostname:
          type: string
        hits:
          type: integer
          format: int64
        misses:
          type: integer
          format: int64
        hit_rate:
          type: number
          format: float
        total_operations:
          type: integer
          format: int64
        uptime_seconds:
          type: integer
          format: int64
        recorded_at:
          type: string
          format: date-time

    HealthStatus:
      type: object
      properties:
        component_name:
          type: string
          example: "database_write"
        status:
          type: string
          enum: [healthy, degraded, unhealthy, unreachable]
        last_check:
          type: string
          format: date-time
        last_error:
          type: string
          nullable: true
        check_count:
          type: integer
        fail_count:
          type: integer
        metadata:
          type: object
          additionalProperties: true
          example:
            latency_ms: 5
            pool_status: "OK"
        server_hostname:
          type: string
          example: "sora-instance-1"
        updated_at:
          type: string
          format: date-time

    SystemHealthOverview:
      type: object
      properties:
        overall_status:
          type: string
          enum: [healthy, degraded, unhealthy, unreachable]
        component_count:
          type: integer
        healthy_count:
          type: integer
        degraded_count:
          type: integer
        unhealthy_count:
          type: integer
        unreachable_count:
          type: integer
        last_updated:
          type: string
          format: date-time

    UploaderStats:
      type: object
      properties:
        pending_count:
          type: integer
        failed_count:
          type: integer
        in_progress_count:
          type: integer
        total_processed:
          type: integer
        last_successful_upload:
          type: string
          format: date-time
        last_failed_upload:
          type: string
          format: date-time

    FailedUpload:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content_hash:
          type: string
        account_id:
          type: integer
          format: int64
        size:
          type: integer
          format: int64
        attempts:
          type: integer
        last_attempt:
          type: string
          format: date-time
        last_error:
          type: string

    AuthStats:
      type: object
      description: "Statistics about authentication attempts."
      properties:
        total_attempts:
          type: integer
        successful_attempts:
          type: integer
        failed_attempts:
          type: integer
        unique_ips:
          type: integer
        unique_usernames:
          type: integer
        unique_protocols:
          type: integer
        window_duration:
          type: string
          example: "24h0m0s"

    CredentialDetails:
      type: object
      description: "Detailed information about a specific credential including associated account details."
      properties:
        address:
          type: string
          format: email
          example: "user@example.com"
        primary_identity:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        account:
          type: object
          properties:
            account_id:
              type: integer
              format: int64
              example: 123
            account_created_at:
              type: string
              format: date-time
              example: "2023-01-01T12:00:00Z"
            account_deleted_at:
              type: string
              format: date-time
              nullable: true
              example: null
            account_status:
              type: string
              enum: [active, deleted]
              example: "active"
            mailbox_count:
              type: integer
              format: int64
              example: 5
            message_count:
              type: integer
              format: int64
              example: 42
            total_credentials:
              type: integer
              example: 3

    DeletedMessage:
      type: object
      description: "Information about a deleted message that can be restored."
      properties:
        id:
          type: integer
          format: int64
          example: 12345
          description: "Unique message ID"
        uid:
          type: integer
          format: int64
          example: 42
          description: "IMAP UID (will change if restored)"
        content_hash:
          type: string
          example: "blake3_abc123..."
          description: "BLAKE3 hash of message content"
        mailbox_path:
          type: string
          example: "INBOX/Archive"
          description: "Original mailbox path"
        mailbox_id:
          type: integer
          format: int64
          nullable: true
          example: 5
          description: "Mailbox ID (null if mailbox was deleted)"
        subject:
          type: string
          example: "Meeting notes"
        message_id:
          type: string
          example: "<abc@example.com>"
          description: "RFC822 Message-ID header"
        internal_date:
          type: string
          format: date-time
          example: "2023-06-15T10:30:00Z"
          description: "IMAP internal date"
        expunged_at:
          type: string
          format: date-time
          example: "2023-06-20T14:00:00Z"
          description: "When the message was deleted"
        size:
          type: integer
          example: 4096
          description: "Message size in bytes"

    ListDeletedMessagesResponse:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/DeletedMessage'
        total:
          type: integer
          example: 15
          description: "Total number of messages returned"

    RestoreMessagesRequest:
      type: object
      description: "Request to restore deleted messages. Must specify either message_ids or at least one filter (mailbox, since, until)."
      properties:
        message_ids:
          type: array
          items:
            type: integer
            format: int64
          example: [12345, 12346, 12347]
          description: "Specific message IDs to restore (takes priority over filters)"
        mailbox:
          type: string
          example: "INBOX/Archive"
          description: "Restore all deleted messages from this mailbox"
        since:
          type: string
          format: date-time
          example: "2023-06-01T00:00:00Z"
          description: "Restore messages deleted after this time"
        until:
          type: string
          format: date-time
          example: "2023-06-30T23:59:59Z"
          description: "Restore messages deleted before this time"

    RestoreMessagesResponse:
      type: object
      properties:
        restored:
          type: integer
          example: 5
          description: "Number of messages restored"
        message:
          type: string
          example: "Successfully restored 5 messages"

    DeliverMailRequest:
      type: object
      description: "Request to deliver mail via HTTP. Supports multiple input formats."
      properties:
        recipients:
          type: array
          items:
            type: string
            format: email
          example: ["user1@example.com", "user2@example.com"]
          description: "Recipient email addresses (required if not in message headers)"
        message:
          type: string
          example: |
            From: sender@example.com
            To: recipient@example.com
            Subject: Test Message

            This is the message body.
          description: "RFC822 formatted message"
        from:
          type: string
          format: email
          example: "sender@example.com"
          description: "Sender address (optional, extracted from message if not provided)"
        subject:
          type: string
          example: "Test Message"
          description: "Message subject (optional, for logging/tracking)"

    RecipientStatus:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        accepted:
          type: boolean
          example: true
        error:
          type: string
          example: "Recipient not found"

    DeliverMailResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: "Overall delivery success (true if all recipients accepted)"
        recipients:
          type: array
          items:
            $ref: '#/components/schemas/RecipientStatus'
        message_id:
          type: string
          example: "<12345.67890@sora-http-delivery>"
          description: "Message-ID assigned or extracted from message"
        error:
          type: string
          example: "Partial delivery failure"
          description: "Error message if delivery failed"

    ACLGrantRequest:
      type: object
      properties:
        owner:
          type: string
          format: email
          description: "Email address of the mailbox owner"
          example: "owner@example.com"
        mailbox:
          type: string
          description: "Mailbox name (e.g., 'Shared/Sales')"
          example: "Shared/Sales"
        identifier:
          type: string
          description: "Email address or 'anyone' for domain-wide access"
          example: "user@example.com"
        rights:
          type: string
          description: "ACL rights string (combination of: lrswipkxtea)"
          example: "lrs"
          pattern: '^[lrswipkxtea]+$'
      required:
        - owner
        - mailbox
        - identifier
        - rights

    ACLRevokeRequest:
      type: object
      properties:
        owner:
          type: string
          format: email
          description: "Email address of the mailbox owner"
          example: "owner@example.com"
        mailbox:
          type: string
          description: "Mailbox name (e.g., 'Shared/Sales')"
          example: "Shared/Sales"
        identifier:
          type: string
          description: "Email address or 'anyone'"
          example: "user@example.com"
      required:
        - owner
        - mailbox
        - identifier

    ACLEntry:
      type: object
      properties:
        identifier:
          type: string
          description: "Email address or 'anyone'"
          example: "user@example.com"
        rights:
          type: string
          description: "ACL rights string"
          example: "lrs"
      required:
        - identifier
        - rights

    ACLListResponse:
      type: object
      properties:
        mailbox:
          type: string
          description: "Mailbox name"
          example: "Shared/Sales"
        owner:
          type: string
          format: email
          description: "Owner email address"
          example: "owner@example.com"
        acls:
          type: array
          items:
            $ref: '#/components/schemas/ACLEntry'
          description: "List of ACL entries"
      required:
        - mailbox
        - owner
        - acls

# Global security requirement
security:
  - ApiKeyAuth: []

# API Paths
paths:
  /accounts:
    post:
      tags:
        - Account Management
      summary: Create a new account with one or more credentials
      description: |
        Creates a new account. This endpoint supports two modes:
        
        **1. Single Credential (Legacy):**
        Provide `email` and `password` (or `password_hash`) at the top level of the request body. This creates an account with a single, primary credential.
        
        **2. Multiple Credentials:**
        Provide a `credentials` array. Each object in the array defines a credential with its own email, password/hash, and primary status.
        - Exactly one credential in the array must have `is_primary: true`.
        - When using the `credentials` array, the top-level `email`, `password`, and `password_hash` fields must be omitted.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateAccountRequest'
                - type: object
                  properties:
                    credentials:
                      type: array
                      items:
                        $ref: '#/components/schemas/CreateCredentialSpec'
                  required:
                    - credentials
            examples:
              with_password:
                summary: Create account with plain text password
                value:
                  email: "user@example.com"
                  password: "s3cr3t_p4ssw0rd"
              with_password_hash:
                summary: Create account with pre-computed hash
                value:
                  email: "user@example.com" 
                  password_hash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewtsJh.2gUOhvY66"
              with_multiple_credentials:
                summary: Create account with multiple credentials
                value:
                  credentials:
                    - email: "primary@example.com"
                      password: "password1"
                      is_primary: true
                    - email: "alias1@example.com"
                      password: "password2"
                      is_primary: false
                    - email: "alias2@example.com"
                      password_hash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewtsJh.2gUOhvY66"
                      is_primary: false
      responses:
        '201':
          description: Account created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  account_id:
                    type: integer
                    format: int64
                  email:
                    type: string
                    format: email
                  message:
                    type: string
                  credentials:
                    type: array
                    description: "List of created credential emails, returned for multi-credential creation."
                    items:
                      type: string
        '400':
          description: |
            Invalid request body or parameters. Common causes:
            - Missing required field `email`
            - Neither `password` nor `password_hash` provided
            - Both `password` and `password_hash` provided (only one allowed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_email:
                  summary: Missing email field
                  value:
                    error: "Email is required"
                missing_password:
                  summary: Missing password or password_hash
                  value:
                    error: "Either password or password_hash is required"
                both_passwords:
                  summary: Both password fields provided
                  value:
                    error: "Cannot specify both password and password_hash"
        '409':
          description: Account with this email already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/{email}:
    get:
      tags:
        - Account Management
      summary: Get detailed account information
      description: Retrieves comprehensive details for an account including all credentials, mailbox/message counts, and status information. Works with both active and soft-deleted accounts.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Account details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '404':
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Account Management
      summary: Update an account's password
      description: |
        Updates the password for a specific credential (email).
        
        You can provide either a plain text password or a pre-computed password hash:
        - Use `password` for plain text passwords (will be hashed using bcrypt)
        - Use `password_hash` for pre-computed hashes (bcrypt, SSHA512, SHA512)
        
        **Note**: You cannot specify both `password` and `password_hash` in the same request.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountRequest'
            examples:
              with_password:
                summary: Update account with plain text password
                value:
                  password: "new_s3cr3t_p4ssw0rd"
              with_password_hash:
                summary: Update account with pre-computed hash
                value:
                  password_hash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewtsJh.2gUOhvY66"
      responses:
        '200':
          description: Account updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: |
            Invalid request body. Common causes:
            - Neither `password` nor `password_hash` provided
            - Both `password` and `password_hash` provided (only one allowed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_password:
                  summary: Missing password or password_hash
                  value:
                    error: "Either password or password_hash is required"
                both_passwords:
                  summary: Both password fields provided
                  value:
                    error: "Cannot specify both password and password_hash"
        '404':
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Account Management
      summary: Delete an account (soft delete)
      description: Soft deletes an account, marking it as deleted but preserving data for the grace period. The account can be restored during this time.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Account soft-deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                    example: "user@example.com"
                  message:
                    type: string
                    example: "Account soft-deleted successfully. It will be permanently removed after the grace period."
        '400':
          description: Account is already deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/{email}/restore:
    post:
      tags:
        - Account Management
      summary: Restore a deleted account
      description: Restores a soft-deleted account, making it active again. Only works on accounts that are within the grace period.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Account restored successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                    example: "user@example.com"
                  message:
                    type: string
                    example: "Account restored successfully."
        '400':
          description: Account is not deleted or cannot be restored.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/{email}/exists:
    get:
      tags:
        - Account Management
      summary: Check if an account exists
      description: Checks if a credential with the given email address exists.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Existence status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountExists'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/{email}/messages/deleted:
    get:
      tags:
        - Message Restoration
      summary: List deleted messages for an account
      description: |
        Retrieves a list of soft-deleted messages that can be restored. Messages are kept during the grace period before permanent deletion.
        Supports filtering by mailbox, deletion time range, and result limit.
      parameters:
        - name: email
          in: path
          required: true
          description: "Account email address"
          schema:
            type: string
            format: email
        - name: mailbox
          in: query
          required: false
          description: "Filter by mailbox path (e.g., 'INBOX', 'INBOX/Archive')"
          schema:
            type: string
          example: "INBOX/Archive"
        - name: since
          in: query
          required: false
          description: "Show messages deleted after this time (RFC3339 or YYYY-MM-DD format)"
          schema:
            type: string
          example: "2023-06-01T00:00:00Z"
        - name: until
          in: query
          required: false
          description: "Show messages deleted before this time (RFC3339 or YYYY-MM-DD format)"
          schema:
            type: string
          example: "2023-06-30T23:59:59Z"
        - name: limit
          in: query
          required: false
          description: "Maximum number of messages to return (default: 100)"
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
      responses:
        '200':
          description: List of deleted messages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeletedMessagesResponse'
              examples:
                success:
                  summary: Successful response with deleted messages
                  value:
                    messages:
                      - id: 12345
                        uid: 42
                        content_hash: "blake3_abc123..."
                        mailbox_path: "INBOX/Archive"
                        mailbox_id: 5
                        subject: "Meeting notes"
                        message_id: "<abc@example.com>"
                        internal_date: "2023-06-15T10:30:00Z"
                        expunged_at: "2023-06-20T14:00:00Z"
                        size: 4096
                      - id: 12346
                        uid: 43
                        content_hash: "blake3_def456..."
                        mailbox_path: "INBOX"
                        mailbox_id: null
                        subject: "Old email"
                        message_id: "<def@example.com>"
                        internal_date: "2023-06-10T08:15:00Z"
                        expunged_at: "2023-06-21T09:00:00Z"
                        size: 2048
                    total: 2
        '400':
          description: Invalid request parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_time:
                  summary: Invalid time format
                  value:
                    error: "Invalid time format for 'since' parameter"
        '404':
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/{email}/messages/restore:
    post:
      tags:
        - Message Restoration
      summary: Restore deleted messages
      description: |
        Restores soft-deleted messages for an account. Messages can be restored by:
        - Specific message IDs (takes priority)
        - Mailbox path (all deleted messages from that mailbox)
        - Time range (messages deleted within the range)

        At least one criterion must be provided. Restored messages will be assigned new UIDs but preserve all other metadata and flags.
        If the original mailbox was deleted, it will be automatically recreated.
      parameters:
        - name: email
          in: path
          required: true
          description: "Account email address"
          schema:
            type: string
            format: email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreMessagesRequest'
            examples:
              by_ids:
                summary: Restore specific messages by ID
                value:
                  message_ids: [12345, 12346, 12347]
              by_mailbox:
                summary: Restore all deleted messages from a mailbox
                value:
                  mailbox: "INBOX/Archive"
              by_time_range:
                summary: Restore messages deleted in a time range
                value:
                  since: "2023-06-01T00:00:00Z"
                  until: "2023-06-30T23:59:59Z"
              combined:
                summary: Restore using multiple criteria
                value:
                  mailbox: "INBOX"
                  since: "2023-06-15T00:00:00Z"
      responses:
        '200':
          description: Messages restored successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestoreMessagesResponse'
              examples:
                success:
                  summary: Successful restoration
                  value:
                    restored: 5
                    message: "Successfully restored 5 messages"
        '400':
          description: Invalid request. No restoration criteria provided or invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                no_criteria:
                  summary: No restoration criteria
                  value:
                    error: "Must specify either message_ids or at least one filter (mailbox, since, until)"
        '404':
          description: Account not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /accounts/{email}/credentials:
    post:
      tags:
        - Account Management
      summary: Add a credential (alias) to an account
      description: |
        Adds a new credential (email alias) to an existing account. The account is identified by an existing email address (primary or alias) provided in the URL path.
        
        You can provide either a plain text password or a pre-computed password hash:
        - Use `password` for plain text passwords (will be hashed using bcrypt)
        - Use `password_hash` for pre-computed hashes (bcrypt, SSHA512, SHA512)
        
        **Note**: You cannot specify both `password` and `password_hash` in the same request.
      parameters:
        - name: email
          in: path
          required: true
          description: "An existing email of the account to which the new credential will be added."
          schema:
            type: string
            format: email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCredentialRequest'
            examples:
              with_password:
                summary: Add credential with plain text password
                value:
                  email: "alias@example.com"
                  password: "s3cr3t_p4ssw0rd_for_alias"
              with_password_hash:
                summary: Add credential with pre-computed hash
                value:
                  email: "alias@example.com"
                  password_hash: "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewtsJh.2gUOhvY66"
      responses:
        '201':
          description: Credential added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  message:
                    type: string
        '400':
          description: |
            Invalid request body. Common causes:
            - Missing required field `email`
            - Neither `password` nor `password_hash` provided  
            - Both `password` and `password_hash` provided (only one allowed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_email:
                  summary: Missing email field
                  value:
                    error: "Email is required"
                missing_password:
                  summary: Missing password or password_hash
                  value:
                    error: "Either password or password_hash is required"
                both_passwords:
                  summary: Both password fields provided
                  value:
                    error: "Cannot specify both password and password_hash"
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /credentials/{email}:
    get:
      tags:
        - Credential Management
      summary: Get detailed information for a specific credential
      description: Retrieves comprehensive information about a specific credential including the associated account details, role information, and account statistics.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          description: The email address (credential) to get details for
      responses:
        '200':
          description: Detailed credential information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDetails'
        '404':
          description: Credential not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Credential Management
      summary: Delete a specific credential
      description: >
        Deletes a specific credential (email/password combination) from an account.
        This operation will fail if you attempt to delete the primary credential or the last remaining credential for an account.
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
          description: The email address of the credential to delete.
      responses:
        '200':
          description: Credential deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  message:
                    type: string
        '400':
          description: Bad request. The credential is the primary or last credential for the account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Credential not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /connections:
    get:
      tags:
        - Connection Management
      summary: List all active connections
      responses:
        '200':
          description: A list of active connections.
          content:
            application/json:
              schema:
                type: object
                properties:
                  connections:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConnectionInfo'
                  count:
                    type: integer
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /connections/stats:
    get:
      tags:
        - Connection Management
      summary: Get connection statistics
      responses:
        '200':
          description: Aggregated connection statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionStats'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /connections/kick:
    post:
      tags:
        - Connection Management
      summary: Mark connections for termination
      description: Marks connections matching the criteria to be terminated by the server.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KickConnectionsRequest'
      responses:
        '200':
          description: Connections marked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  connections_marked:
                    type: integer
        '400':
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /connections/user/{email}:
    get:
      tags:
        - Connection Management
      summary: Get connections for a specific user
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: A list of connections for the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  connections:
                    type: array
                    items:
                      $ref: '#/components/schemas/ConnectionInfo'
                  count:
                    type: integer
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cache/stats:
    get:
      tags:
        - Cache Management
      summary: Get cache statistics
      responses:
        '200':
          description: Cache statistics.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheStats'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: Cache is not available/enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cache/metrics:
    get:
      tags:
        - Cache Management
      summary: Get cache performance metrics
      parameters:
        - name: latest
          in: query
          schema:
            type: boolean
          description: "If true, returns only the latest metric record for each instance."
        - name: instance_id
          in: query
          schema:
            type: string
          description: "Filter metrics by a specific instance ID."
        - name: since
          in: query
          schema:
            type: string
            format: date-time
          description: "Return metrics recorded after this timestamp (RFC3339). Defaults to 24 hours ago."
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
          description: "Maximum number of records to return."
      responses:
        '200':
          description: A list of cache metrics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  metrics:
                    type: array
                    items:
                      $ref: '#/components/schemas/CacheMetricsRecord'
                  count:
                    type: integer
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /cache/purge:
    post:
      tags:
        - Cache Management
      summary: Purge the entire cache
      responses:
        '200':
          description: Cache purged successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  stats_before:
                    $ref: '#/components/schemas/CacheStats'
                  stats_after:
                    $ref: '#/components/schemas/CacheStats'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: Cache is not available/enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /uploader/status:
    get:
      tags:
        - Uploader Monitoring
      summary: Get uploader status
      parameters:
        - name: show_failed
          in: query
          schema:
            type: boolean
          description: "If true, includes a list of recently failed uploads in the response."
        - name: max_attempts
          in: query
          schema:
            type: integer
            default: 5
          description: "The failure threshold to consider when calculating failed counts."
        - name: failed_limit
          in: query
          schema:
            type: integer
            default: 10
          description: "If show_failed is true, this limits the number of failed uploads returned."
      responses:
        '200':
          description: Uploader status and statistics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  stats:
                    $ref: '#/components/schemas/UploaderStats'
                  failed_uploads:
                    type: array
                    items:
                      $ref: '#/components/schemas/FailedUpload'
                  failed_count:
                    type: integer
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /uploader/failed:
    get:
      tags:
        - Uploader Monitoring
      summary: Get a list of failed uploads
      parameters:
        - name: max_attempts
          in: query
          schema:
            type: integer
            default: 5
          description: "The failure threshold to consider when fetching failed uploads."
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
          description: "Maximum number of failed uploads to return."
      responses:
        '200':
          description: A list of failed uploads.
          content:
            application/json:
              schema:
                type: object
                properties:
                  failed_uploads:
                    type: array
                    items:
                      $ref: '#/components/schemas/FailedUpload'
                  count:
                    type: integer
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/stats:
    get:
      tags:
        - System Monitoring
      summary: Get authentication statistics
      parameters:
        - name: window
          in: query
          schema:
            type: string
            default: "24h"
          description: "Time window for statistics (e.g., '1h', '30m')."
      responses:
        '200':
          description: Authentication statistics.
          content:
            application/json:
              schema:
                type: object
                properties:
                  stats:
                    $ref: '#/components/schemas/AuthStats'
                  window:
                    type: string
                  window_seconds:
                    type: integer
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health/overview:
    get:
      tags:
        - Health Monitoring
      summary: Get system health overview
      parameters:
        - name: hostname
          in: query
          schema:
            type: string
          description: "Optional. Filter overview for a specific server hostname."
      responses:
        '200':
          description: System health overview.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealthOverview'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health/servers/{hostname}:
    get:
      tags:
        - Health Monitoring
      summary: Get health status for a host
      parameters:
        - name: hostname
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Health statuses for the specified host.
          content:
            application/json:
              schema:
                type: object
                properties:
                  hostname:
                    type: string
                  statuses:
                    type: array
                    items:
                      $ref: '#/components/schemas/HealthStatus'
                  count:
                    type: integer
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /health/servers/{hostname}/components/{component}:
    get:
      tags:
        - Health Monitoring
      summary: Get health status for a component
      parameters:
        - name: hostname
          in: path
          required: true
          schema:
            type: string
        - name: component
          in: path
          required: true
          schema:
            type: string
        - name: history
          in: query
          schema:
            type: boolean
          description: "If true, returns historical health data instead of the current status."
        - name: since
          in: query
          schema:
            type: string
            format: date-time
          description: "If history=true, return records after this timestamp (RFC3339). Defaults to 24 hours ago."
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
          description: "If history=true, limit the number of historical records returned."
      responses:
        '200':
          description: Current or historical health status for the component.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/HealthStatus'
                  - type: object
                    properties:
                      hostname:
                        type: string
                      component:
                        type: string
                      history:
                        type: array
                        items:
                          $ref: '#/components/schemas/HealthStatus'
                      count:
                        type: integer
                      since:
                        type: string
                        format: date-time
        '404':
          description: Component health status not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /config:
    get:
      tags:
        - System Information
      summary: Get API configuration info
      description: Returns basic information about the API and a list of available endpoints.
      responses:
        '200':
          description: API configuration details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_version:
                    type: string
                  server_type:
                    type: string
                  features_enabled:
                    type: object
                    additionalProperties:
                      type: boolean
                  endpoints:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string

  /mailboxes/acl/grant:
    post:
      tags:
        - ACL Management
      summary: Grant ACL rights to a user on a mailbox
      description: |
        Grant ACL (Access Control List) rights to a specific user or identifier on a mailbox.

        Supported ACL rights:
        - `l` (lookup) - Mailbox is visible in listings
        - `r` (read) - Read messages
        - `s` (seen) - Change \Seen flag
        - `w` (write) - Change other flags
        - `i` (insert) - Append/copy messages
        - `p` (post) - Post to submission address
        - `k` (create) - Create child mailboxes
        - `x` (delete) - Delete/rename mailbox
        - `t` (delete-msg) - Set \Deleted flag on messages
        - `e` (expunge) - Expunge deleted messages
        - `a` (admin) - Administer ACL

        Use "anyone" as the identifier to grant access to all users in the same domain.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACLGrantRequest'
            examples:
              user_access:
                summary: Grant read-only access to a user
                value:
                  owner: "owner@example.com"
                  mailbox: "Shared/Sales"
                  identifier: "bob@example.com"
                  rights: "lrs"
              anyone_access:
                summary: Grant domain-wide read access
                value:
                  owner: "owner@example.com"
                  mailbox: "Shared/Public"
                  identifier: "anyone"
                  rights: "lr"
      responses:
        '200':
          description: ACL rights granted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "ACL rights granted successfully"
                  owner:
                    type: string
                    example: "owner@example.com"
                  mailbox:
                    type: string
                    example: "Shared/Sales"
                  identifier:
                    type: string
                    example: "bob@example.com"
                  rights:
                    type: string
                    example: "lrs"
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - invalid or missing API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mailboxes/acl/revoke:
    post:
      tags:
        - ACL Management
      summary: Revoke ACL rights from a user on a mailbox
      description: |
        Revoke all ACL (Access Control List) rights from a specific user or identifier on a mailbox.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ACLRevokeRequest'
            examples:
              revoke_user:
                summary: Revoke access from a user
                value:
                  owner: "owner@example.com"
                  mailbox: "Shared/Sales"
                  identifier: "bob@example.com"
              revoke_anyone:
                summary: Revoke domain-wide access
                value:
                  owner: "owner@example.com"
                  mailbox: "Shared/Public"
                  identifier: "anyone"
      responses:
        '200':
          description: ACL rights revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "ACL rights revoked successfully"
                  owner:
                    type: string
                    example: "owner@example.com"
                  mailbox:
                    type: string
                    example: "Shared/Sales"
                  identifier:
                    type: string
                    example: "bob@example.com"
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - invalid or missing API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mailboxes/acl:
    get:
      tags:
        - ACL Management
      summary: List all ACL entries for a mailbox
      description: |
        Retrieve all ACL (Access Control List) entries for a specific mailbox.
        Returns a list of identifiers (email addresses or "anyone") and their associated rights.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: owner
          in: query
          required: true
          schema:
            type: string
            format: email
          description: "Email address of the mailbox owner"
          example: "owner@example.com"
        - name: mailbox
          in: query
          required: true
          schema:
            type: string
          description: "Mailbox name (e.g., 'Shared/Sales')"
          example: "Shared/Sales"
      responses:
        '200':
          description: List of ACL entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ACLListResponse'
              examples:
                with_entries:
                  summary: Mailbox with ACL entries
                  value:
                    mailbox: "Shared/Sales"
                    owner: "owner@example.com"
                    acls:
                      - identifier: "owner@example.com"
                        rights: "lrswipkxtea"
                      - identifier: "bob@example.com"
                        rights: "lrs"
                      - identifier: "anyone"
                        rights: "lr"
                empty:
                  summary: Mailbox with no ACL entries
                  value:
                    mailbox: "Shared/Empty"
                    owner: "owner@example.com"
                    acls: []
        '400':
          description: Bad request - missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - invalid or missing API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /mail/deliver:
    post:
      tags:
        - Mail Delivery
      summary: Deliver mail via HTTP
      description: |
        Deliver an RFC822 formatted email message to one or more recipients via HTTP POST.

        This endpoint provides an alternative to LMTP for programmatic mail delivery.

        **Supported Content-Types:**
        - `application/json` - JSON request with recipients and message
        - `message/rfc822` - Raw RFC822 message (recipients in query params or X-Recipients header)
        - `multipart/form-data` - Form submission with message field
        - `text/plain` - Plain text RFC822 message

        **Authentication:** Requires API key in Authorization header.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliverMailRequest'
            examples:
              simple:
                summary: Simple JSON delivery
                value:
                  recipients: ["user@example.com"]
                  message: |
                    From: sender@example.com
                    To: user@example.com
                    Subject: Test Message

                    This is a test message delivered via HTTP.
              multiple_recipients:
                summary: Multiple recipients
                value:
                  recipients: ["user1@example.com", "user2@example.com"]
                  from: "sender@example.com"
                  subject: "Notification"
                  message: |
                    From: sender@example.com
                    Subject: Notification

                    This message goes to multiple recipients.
          message/rfc822:
            schema:
              type: string
              format: binary
            example: |
              From: sender@example.com
              To: recipient@example.com
              Subject: Test

              Message body
      parameters:
        - name: recipients
          in: query
          schema:
            type: string
          description: "Comma-separated recipient emails (for non-JSON requests)"
          example: "user1@example.com,user2@example.com"
      responses:
        '200':
          description: Mail delivered successfully to all recipients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliverMailResponse'
              examples:
                success:
                  summary: Successful delivery
                  value:
                    success: true
                    recipients:
                      - email: "user@example.com"
                        accepted: true
                    message_id: "<12345.67890@sora-http-delivery>"
        '207':
          description: Multi-Status - Partial delivery success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliverMailResponse'
              examples:
                partial:
                  summary: Partial delivery
                  value:
                    success: false
                    recipients:
                      - email: "user1@example.com"
                        accepted: true
                      - email: "user2@example.com"
                        accepted: false
                        error: "Recipient not found"
                    message_id: "<12345.67890@sora-http-delivery>"
                    error: "Partial delivery failure"
        '400':
          description: Bad request - invalid message format or missing recipients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalid_message:
                  summary: Invalid RFC822 message
                  value:
                    error: "Invalid RFC822 message: malformed header"
                no_recipients:
                  summary: No recipients specified
                  value:
                    error: "At least one recipient is required"
        '401':
          description: Unauthorized - invalid or missing API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
