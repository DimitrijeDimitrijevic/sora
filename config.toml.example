# SORA MAIL SERVER - CONFIGURATION FILE
# =============================================================================
# 
# This is the main configuration file for Sora, a hackable IMAP server built
# with Go and PostgreSQL. This file contains all available configuration
# options with detailed explanations and examples.
#
# IMPORTANT: 
# - Copy this file to config.toml and modify the values for your deployment
# - All sections and options are documented with their default values
# - Duration values accept Go duration format: "1h", "30m", "5s", "100ms"
# - Size values accept common suffixes: "1gb", "100mb", "5kb"

log_output = "stderr"         # Log destination. Options: "stderr", "stdout", "syslog", or "/path/to/file.log".


# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL database connection settings with read/write split support.
# Sora requires PostgreSQL with the pg_trgm extension for full-text search.

[database]
log_queries = false             # Enable SQL query logging. Useful for debugging, but impacts performance.
query_timeout = "30s"           # Default timeout for all database queries (e.g., "30s", "1m").
search_timeout = "1m"           # Specific timeout for complex search queries (e.g., "60s", "2m").
write_timeout = "15s"           # Timeout for write operations (INSERT, UPDATE, DELETE).


# WRITE DATABASE CONFIGURATION
# =============================================================================
# Primary database endpoint for all write operations (INSERT, UPDATE, DELETE).

[database.write]
hosts = ["localhost"]         # Database server hosts. Can be ["host:port"] or multiple for failover.
port = 5432                   # Database port. Alternative to including it in hosts.
user = "postgres"             # Database username for authentication.
password = ""                 # Database user password. Leave empty for no password.
name = "sora_mail_db"         # Database name to connect to.
tls = false                   # Enable TLS/SSL for database connection. Recommended for remote connections.

# --- WRITE DATABASE CONNECTION POOL SETTINGS ---
# Fine-tune write database connection management for optimal performance.
max_conns = 50                  # Maximum connections in the write pool. Should be < PostgreSQL max_connections.
min_conns = 5                   # Minimum connections maintained in write pool (kept alive always).
max_conn_lifetime = "1h"        # Maximum lifetime before write connection refresh (prevents stale connections).
max_conn_idle_time = "30m"      # Maximum idle time before closing excess write connections (above min_conns).
query_timeout = "30s"           # Per-endpoint timeout for individual database queries (e.g., "30s").


# READ DATABASE CONFIGURATION
# =============================================================================
# Read replica database endpoint(s) for SELECT operations. Can specify multiple
# hosts for load balancing across read replicas. If not configured, read
# operations will use the write database connection pool.

[database.read]
hosts = ["localhost"]         # Database server hosts for read operations. Can specify multiple for load balancing.
port = 5432                   # Database port for read operations.
user = "postgres"             # Database username for read operations.
password = ""                 # Database user password for read operations.
name = "sora_mail_db"         # Database name for read operations (typically same as write).
tls = false                   # Enable TLS/SSL for read database connections.

# --- READ DATABASE CONNECTION POOL SETTINGS ---
# Fine-tune read database connection management for optimal performance.
max_conns = 100                 # Maximum connections in the read pool. Can be higher than write pool.
min_conns = 10                  # Minimum connections maintained in read pool.
max_conn_lifetime = "1h"        # Maximum lifetime before read connection refresh.
max_conn_idle_time = "30m"      # Maximum idle time before closing excess read connections.
query_timeout = "30s"           # Per-endpoint timeout for individual database queries (e.g., "30s").


# S3-COMPATIBLE OBJECT STORAGE CONFIGURATION  
# =============================================================================
# Sora stores message bodies in S3-compatible object storage for scalability
# and durability. Message metadata remains in PostgreSQL for fast access.

[s3]
endpoint = "s3.amazonaws.com"           # S3-compatible storage endpoint URL (e.g., "s3.amazonaws.com", "minio.example.com:9000").
disable_tls = false                     # Disable TLS for S3 endpoint. Useful for local MinIO setups.
access_key = "YOUR_S3_ACCESS_KEY_HERE"  # S3 access key ID for authentication.
secret_key = "YOUR_S3_SECRET_KEY_HERE"  # S3 secret access key for authentication.
bucket = "your-sora-mail-bucket"        # S3 bucket name for storing message bodies. Must be globally unique.
trace = false                           # Enable detailed S3 request/response tracing. Impacts performance.

# --- CLIENT-SIDE ENCRYPTION SETTINGS ---
# Encrypt message bodies before uploading to S3 for additional security
encrypt = false                                                                    # Enable client-side encryption. Messages are encrypted before S3 upload.
encryption_key = "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef" # 32-byte master encryption key (64 hex chars). CRITICAL: Store securely! Gen: openssl rand -hex 32


# LOCAL CACHE CONFIGURATION
# =============================================================================
# Local filesystem cache for frequently accessed message bodies, reducing
# S3 API calls and improving performance for recently accessed messages.

[local_cache]
path = "/tmp/sora/cache"      # Filesystem path for cache storage. Must be writable. Fast storage (SSD) recommended.
capacity = "1gb"              # Maximum total cache size (e.g., "100mb", "1gb"). LRU eviction when exceeded.
max_object_size = "5mb"       # Maximum size for individual cached objects. Prevents large messages from dominating cache.
metrics_interval = "5m"       # How often cache hit/miss ratios are stored in the database.
metrics_retention = "30d"     # How long to retain cache metrics in the database.
purge_interval = "12h"        # How often to run cache cleanup (capacity enforcement, stale entry removal).
orphan_cleanup_age = "30d"    # Minimum age before orphaned cache entries (for deleted DB messages) are removed.

# --- CACHE WARMUP ---
# Preload recent messages when users reconnect to improve performance.
enable_warmup = true          # Enable cache warmup on user login.
warmup_message_count = 50     # Number of recent messages to preload per mailbox.
warmup_mailboxes = ["INBOX"]  # Mailboxes to warm up. Most clients check INBOX first. e.g., ["INBOX", "Sent"].
warmup_async = true           # true: warmup happens in background (fast login). false: blocks login.
warmup_timeout = "5m"         # Maximum time allowed for a cache warmup operation.


# S3 UPLOADER CONFIGURATION
# =============================================================================
# Background worker that handles asynchronous uploads of message bodies
# to S3 storage after messages are initially stored locally.

[uploader]
path = "/tmp/sora/uploads"    # Filesystem path for staging uploads (temporary storage before S3).
batch_size = 20               # Number of messages batched together per upload operation.
concurrency = 10              # Number of concurrent upload workers.
max_attempts = 5              # Maximum retry attempts for failed uploads.
retry_interval = "30s"        # Initial delay between retry attempts (exponential backoff is applied).


# CLEANUP PROCESS CONFIGURATION
# =============================================================================
# Background worker that manages message lifecycle and removes old/deleted
# messages according to configured retention policies.

[cleanup]
grace_period = "14d"          # Recovery window for accidentally deleted messages before permanent removal.
wake_interval = "1h"          # How often the cleanup worker runs.
max_age_restriction = ""      # Max message age before auto-expungement. Empty = no limit. e.g., "90d", "365d".
fts_retention = "730d"        # How long to keep full-text search content in DB. Older messages lose searchability.
auth_attempts_retention = "7d"  # How long to retain authentication attempt logs in the database.
health_status_retention = "30d" # How long to retain health status history in the database.


# PROTOCOL SERVERS CONFIGURATION
# =============================================================================
# Sora supports multiple email protocols. Each can be enabled/disabled and
# configured independently for different deployment scenarios.

[servers]
debug = false                  # Global debug flag for all protocol servers. Enables verbose logging.


# IMAP SERVER CONFIGURATION
# =============================================================================
# Internet Message Access Protocol - primary protocol for email access
# Supports IMAP4rev1 with IDLE extension for real-time notifications.

[servers.imap]
start = true                # Enable/disable IMAP server.
addr = ":143"               # Listen address and port. Use :993 for IMAPS.
append_limit = "25mb"       # Maximum message size for IMAP APPEND. Empty = no limit.

# --- CONNECTION LIMITING AND MEMORY MANAGEMENT ---
# Controls concurrent connections to prevent resource exhaustion
max_connections = 1000        # Maximum concurrent IMAP connections across all clients.
max_connections_per_ip = 10   # Max connections per client IP. Set to 0 if behind a load balancer.

# --- MASTER USER AUTHENTICATION ---
# Administrative access for proxy servers and management tools
master_username = ""          # Master username for administrative IMAP access (e.g., for proxies).
master_password = ""          # Password for master_username.
master_sasl_username = ""     # Alternative master username for SASL authentication.
master_sasl_password = ""     # Password for master_sasl_username.

# --- TLS/SSL CONFIGURATION ---
# Transport Layer Security for encrypted IMAP connections
tls = false                               # Enable TLS for IMAP (IMAPS). Typically on port 993.
tls_cert_file = "/path/to/your/imap.crt"  # TLS certificate file path (required if tls=true).
tls_key_file = "/path/to/your/imap.key"   # TLS private key file path (required if tls=true).
tls_verify = true                         # Verify client certificates (mutual TLS). Usually false.

# --- PROXY PROTOCOL CONFIGURATION ---
# Enable real client IP detection when behind load balancers/proxies
# CRITICAL: Only enable when actually behind a proxy that sends PROXY headers!

[servers.imap.proxy_protocol]
# Enable PROXY protocol v1/v2 support 
# WARNING: Only enable if you trust the source! Allows IP spoofing if misconfigured.
enabled = false       # Enable PROXY protocol v1/v2 support.
# mode can be "required" (default) or "optional".
# "required": All connections MUST have a PROXY header.
# "optional": Connections are inspected for a PROXY header. If not present, it's treated as a direct connection.
# WARNING: Use "optional" with extreme caution as it weakens security guarantees.
# mode = "required"
trusted_proxies = [   # Trusted proxy networks. SECURITY: Only list networks you control!
    "127.0.0.0/8",    # localhost
    "10.0.0.0/8",     # RFC1918 private networks  
    "172.16.0.0/12",  # RFC1918 private networks
    "192.168.0.0/16"  # RFC1918 private networks
]
timeout = "5s"        # Timeout for reading PROXY protocol header.

# --- AUTHENTICATION RATE LIMITING ---
# Protect against brute force attacks with progressive delays and blocking

[servers.imap.auth_rate_limit]
enabled = false                   # Enable authentication rate limiting.
max_attempts_per_ip = 10          # Max failed auth attempts per IP address.
max_attempts_per_username = 5     # Max failed auth attempts per username (across all IPs).
ip_window_duration = "15m"        # Time window for IP-based rate limiting.
username_window_duration = "30m"  # Time window for username-based rate limiting.
cleanup_interval = "5m"           # How often to clean up expired rate limiting data.

# --- ENHANCED ANTI-BRUTE-FORCE FEATURES ---
# Advanced protection with fast blocking and progressive delays
fast_block_threshold = 10     # Failed attempts before immediate IP blocking.
fast_block_duration = "5m"    # Duration of the fast IP block.
delay_start_threshold = 2     # Failed attempts before applying authentication delays.
initial_delay = "2s"          # Initial authentication delay after threshold is reached.
max_delay = "30s"             # Maximum authentication delay.
delay_multiplier = 2.0        # Multiplier for progressive delay (exponential backoff).

# --- ENHANCED CACHE AND DATABASE SETTINGS ---
cache_cleanup_interval = "1m"   # How often to clean up expired in-memory cache entries (fast blocks, delays).
db_sync_interval = "30s"        # How often to sync batched auth attempts to the database.
max_pending_batch = 100         # Max pending auth attempts before forcing a DB sync.
db_error_threshold = "1m"       # Time to wait before retrying DB operations after an error.


# LMTP SERVER CONFIGURATION
# =============================================================================
# Local Mail Transfer Protocol - handles incoming mail delivery from MTAs
# Executes SIEVE filters and delivers messages to user mailboxes.

[servers.lmtp]
start = true                  # Enable/disable LMTP server.
addr = ":24"                  # Listen address and port.
external_relay = ""           # External SMTP relay for mail forwarding (optional). e.g., "smtp.example.com:25".

# --- TLS/SSL CONFIGURATION ---
# Transport encryption for LMTP connections
tls = false                               # Enable TLS for LMTP server (immediate TLS).
tls_use_starttls = false                  # Use STARTTLS for opportunistic encryption.
tls_cert_file = "/path/to/your/lmtp.crt"  # TLS certificate file path.
tls_key_file = "/path/to/your/lmtp.key"   # TLS private key file path.
tls_verify = true                         # Verify client certificates (mutual TLS).

# --- CONNECTION LIMITING ---
# Control concurrent LMTP connections for resource management
max_connections = 500         # Maximum concurrent LMTP connections.
max_connections_per_ip = 5    # Maximum connections per client IP.

# --- PROXY PROTOCOL CONFIGURATION ---
[servers.lmtp.proxy_protocol]
# Enable PROXY protocol support for real client IP detection
enabled = false                 # Enable if behind a load balancer/proxy.
# mode can be "required" (default) or "optional".
# "required": All connections MUST have a PROXY header.
# "optional": Connections are inspected for a PROXY header. If not present, it's treated as a direct connection.
# WARNING: Use "optional" with extreme caution as it weakens security guarantees.
# mode = "required"
trusted_proxies = ["127.0.0.0/8", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]
timeout = "5s"                  # Timeout for reading PROXY protocol header.


# POP3 SERVER CONFIGURATION  
# =============================================================================
# Post Office Protocol version 3 - legacy protocol for downloading email
# Generally used by older clients or specific use cases.

[servers.pop3]
start = true                   # Enable/disable POP3 server.
addr = ":110"                  # Listen address and port. Use :995 for POP3S.

# --- TLS/SSL CONFIGURATION ---
# Transport encryption for POP3 connections
tls = false                               # Enable TLS for POP3 connections (POP3S).
tls_cert_file = "/path/to/your/pop3.crt"  # TLS certificate file path.
tls_key_file = "/path/to/your/pop3.key"   # TLS private key file path.
tls_verify = false                        # Verify client certificates (mutual TLS).
master_sasl_username = ""                 # Master username for proxy authentication.
master_sasl_password = ""                 # Master password for proxy authentication.

# --- CONNECTION LIMITING ---
# Control concurrent POP3 connections
max_connections = 500         # Maximum concurrent POP3 connections.
max_connections_per_ip = 5    # Maximum connections per client IP.

# --- PROXY PROTOCOL CONFIGURATION ---
[servers.pop3.proxy_protocol]
# Enable PROXY protocol support for real client IP detection
enabled = false
# mode can be "required" (default) or "optional".
# "required": All connections MUST have a PROXY header.
# "optional": Connections are inspected for a PROXY header. If not present, it's treated as a direct connection.
# WARNING: Use "optional" with extreme caution as it weakens security guarantees.
# mode = "required"
trusted_proxies = ["127.0.0.0/8", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]
timeout = "5s"

# --- AUTHENTICATION RATE LIMITING ---
# Same anti-brute-force protection as IMAP (see IMAP section for detailed explanations)

[servers.pop3.auth_rate_limit]
enabled = false
max_attempts_per_ip = 10
max_attempts_per_username = 5
ip_window_duration = "15m"
username_window_duration = "30m"
cleanup_interval = "5m"
fast_block_threshold = 10
fast_block_duration = "5m"
delay_start_threshold = 2
initial_delay = "2s"
max_delay = "30s"
delay_multiplier = 2.0

# --- ENHANCED CACHE AND DATABASE SETTINGS ---
cache_cleanup_interval = "1m"   # How often to clean up expired in-memory cache entries (fast blocks, delays).
db_sync_interval = "30s"        # How often to sync batched auth attempts to the database.
max_pending_batch = 100         # Max pending auth attempts before forcing a DB sync.
db_error_threshold = "1m"       # Time to wait before retrying DB operations after an error.


# MANAGESIEVE SERVER CONFIGURATION
# =============================================================================
# ManageSieve protocol for managing SIEVE mail filtering scripts
# Allows clients to upload, edit, and manage server-side email filters.

[servers.managesieve]
start = true                  # Enable/disable ManageSieve server.
addr = ":4190"                # Listen address and port.
insecure_auth = false         # Allow plaintext auth. SECURITY: Should be false in production.
max_script_size = "16kb"      # Maximum size for a SIEVE script.

# --- TLS/SSL CONFIGURATION ---
# Transport encryption for ManageSieve connections
tls = false                                     # Enable TLS for ManageSieve connections.
tls_use_starttls = false                        # Use STARTTLS for opportunistic encryption.
tls_cert_file = "/path/to/your/managesieve.crt" # TLS certificate file path.
tls_key_file = "/path/to/your/managesieve.key"  # TLS private key file path.
tls_verify = true               # Verify client certificates (mutual TLS).
master_sasl_username = ""       # Master username for proxy authentication.
master_sasl_password = ""       # Master password for proxy authentication.

# --- CONNECTION LIMITING ---
# Control concurrent ManageSieve connections
max_connections = 200         # Maximum concurrent ManageSieve connections.
max_connections_per_ip = 3    # Maximum connections per client IP.

# --- PROXY PROTOCOL CONFIGURATION ---
[servers.managesieve.proxy_protocol]
# Enable PROXY protocol support for real client IP detection
enabled = false
# mode can be "required" (default) or "optional".
# "required": All connections MUST have a PROXY header.
# "optional": Connections are inspected for a PROXY header. If not present, it's treated as a direct connection.
# WARNING: Use "optional" with extreme caution as it weakens security guarantees.
# mode = "required"
trusted_proxies = ["127.0.0.0/8", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]
timeout = "5s"

# --- AUTHENTICATION RATE LIMITING ---
# Same anti-brute-force protection as IMAP/POP3 (see IMAP section for details)

[servers.managesieve.auth_rate_limit]
enabled = false
max_attempts_per_ip = 10
max_attempts_per_username = 5
ip_window_duration = "15m"
username_window_duration = "30m"
cleanup_interval = "5m"
fast_block_threshold = 10
fast_block_duration = "5m"
delay_start_threshold = 2
initial_delay = "2s"
max_delay = "30s"
delay_multiplier = 2.0

# --- ENHANCED CACHE AND DATABASE SETTINGS ---
cache_cleanup_interval = "1m"   # How often to clean up expired in-memory cache entries (fast blocks, delays).
db_sync_interval = "30s"        # How often to sync batched auth attempts to the database.
max_pending_batch = 100         # Max pending auth attempts before forcing a DB sync.
db_error_threshold = "1m"       # Time to wait before retrying DB operations after an error.


# PROXY SERVER CONFIGURATIONS
# =============================================================================
# Sora can act as a proxy server, load balancing connections across multiple
# backend Sora servers. This enables horizontal scaling and high availability.

# IMAP PROXY CONFIGURATION
# =============================================================================
# Proxy IMAP connections across multiple backend servers with load balancing
# and user-server affinity support.

[servers.imap_proxy]
start = true                                                                                      # Enable/disable IMAP proxy server.
addr = ":1143"                                                                                  # Proxy listen address. Must be different from backend IMAP port.
remote_addrs = ["backend1.example.com:143", "backend2.example.com:143", "backend3.example.com:143"] # Backend server addresses for load balancing.
max_connections = 2000                                                                            # Maximum concurrent connections to the proxy.
max_connections_per_ip = 50                                                                       # Maximum connections per client IP to the proxy.
master_sasl_username = "proxyuser"                                                              # Master username for authenticating to backends.
master_sasl_password = "proxypass"                                                              # Master password for authenticating to backends.

# --- PROXY TLS CONFIGURATION ---
# TLS settings for client-to-proxy connections
tls = false                   # Enable TLS for client-to-proxy connections.
tls_cert_file = ""            # TLS certificate file for proxy server.
tls_key_file = ""             # TLS private key file for proxy server.
tls_verify = true             # Verify client certificates for proxy connections (mutual TLS).

# --- BACKEND TLS CONFIGURATION ---
# TLS settings for proxy-to-backend connections
remote_tls = false                # Enable TLS for proxy-to-backend connections.
remote_tls_verify = true          # Verify backend server certificates. Recommended.
remote_use_proxy_protocol = true  # Send PROXY protocol v2 headers to backends.
remote_use_id_command = false      # Send IMAP ID command with client info to backends.

# --- PROXY BEHAVIOR CONFIGURATION ---
# Control proxy connection handling and load balancing
connect_timeout = "30s"     # Connection timeout for backend servers.
session_timeout = "30m"     # Maximum session duration before automatic disconnect.
enable_affinity = true      # Enable user-server affinity (sticky sessions).
affinity_validity = "24h"   # How long to remember user-server affinity.
affinity_stickiness = 0.9   # Probability (0.0-1.0) of sticking to the preferred server. 1.0 = always sticky.

# --- AUTHENTICATION RATE LIMITING ---
# Same anti-brute-force protection as IMAP (see IMAP section for detailed explanations)

[servers.imap_proxy.auth_rate_limit]
enabled = false
max_attempts_per_ip = 10
max_attempts_per_username = 5
ip_window_duration = "15m"
username_window_duration = "30m"
cleanup_interval = "5m"
fast_block_threshold = 10
fast_block_duration = "5m"
delay_start_threshold = 2
initial_delay = "2s"
max_delay = "30s"
delay_multiplier = 2.0

# --- ENHANCED CACHE AND DATABASE SETTINGS ---

# How often to clean up expired in-memory cache entries (fast blocks, delays)
# Examples:
#   cache_cleanup_interval = "30s"             # Aggressive cleanup
#   cache_cleanup_interval = "1m"              # Standard cleanup
#   cache_cleanup_interval = "5m"              # Conservative cleanup
cache_cleanup_interval = "1m"

# How often to sync batched authentication attempts to the database
# Examples:
#   db_sync_interval = "10s"                   # Frequent sync
#   db_sync_interval = "30s"                   # Standard sync
#   db_sync_interval = "1m"                    # Infrequent sync
db_sync_interval = "30s"

# Maximum number of pending auth attempts before forcing a database sync
# Examples:
#   max_pending_batch = 50                     # Small batch
#   max_pending_batch = 100                    # Standard batch
#   max_pending_batch = 200                    # Large batch
max_pending_batch = 100

# Time to wait before retrying database operations after an error (circuit breaker)
# Examples:
#   db_error_threshold = "30s"                 # Quick recovery
#   db_error_threshold = "1m"                  # Standard recovery
#   db_error_threshold = "5m"                  # Conservative recovery
db_error_threshold = "1m"

# --- DATABASE-DRIVEN USER ROUTING (PRELOOKUP) ---
# Advanced feature for routing users to specific backend servers based on database queries.
# Enables smart load balancing and user distribution across multiple backend servers.

[servers.imap_proxy.prelookup]
enabled = false               # Enable/disable database-driven user routing.

# --- PRELOOKUP DATABASE CONNECTION ---
hosts = ["localhost"]         # Database server hosts for prelookup queries.
port = 5432                   # Database port.
user = "postgres"             # Database username.
password = ""                 # Database password.
name = "routing_db"           # Database name.
tls = false                   # Enable TLS for prelookup database connections.

# --- PRELOOKUP DATABASE CONNECTION POOL ---
# Configure connection pool for prelookup database queries
max_conns = 10                  # Maximum connections in the prelookup pool.
min_conns = 2                   # Minimum connections in the prelookup pool.
max_conn_lifetime = "1h"        # Connection lifetime for prelookup connections.
max_conn_idle_time = "30m"      # Connection idle time for prelookup connections.

# --- PRELOOKUP CACHING CONFIGURATION ---
# Cache routing decisions to reduce database load and improve performance
cache_ttl = "10m"               # Cache duration for routing decisions.
cache_size = 10000              # Maximum entries in the routing cache.

# --- PRELOOKUP CONFIGURATION ---
auth_method = "bcrypt"          # Auth method for password verification ("bcrypt", "plain", "ssha512", etc.). Used in Auth+Route mode.

# Main query for user lookup. The number and order of columns determine the operational mode.
# Column patterns:
#   1. Routing-only (1 column):
#      - SELECT server_address FROM ...
#   2. Auth+Routing (2 columns):
#      - SELECT password_hash, server_address FROM ...
#   3. Auth+Routing with Account ID (3+ columns):
#      - SELECT account_id, password_hash, server_address, ... FROM ...
#
query = "SELECT password_hash, server_address FROM user_routing WHERE email = $1 AND active = true" # REQUIRED if prelookup is enabled.

# --- PRELOOKUP BACKEND TLS CONFIGURATION ---
# TLS settings for connections to backend servers returned by the prelookup query.
# These settings override the proxy's main remote_tls settings when a server
# is determined via prelookup.
remote_tls = false                # Enable TLS for connections to prelookup backends.
remote_tls_verify = true          # Verify backend server certificates. Strongly recommended.
# remote_port = 143
# Default port for backends if not specified in query result.
remote_use_proxy_protocol = true  # Send PROXY protocol v2 headers to backends.
remote_use_id_command = false     # Send IMAP ID command with client info to backends.

# --- PRELOOKUP FALLBACK BEHAVIOR ---
# Control what happens when prelookup fails or user is not found
fallback_to_default = true    # true: Fallback to default proxy routing if prelookup fails. false: Reject connection.


# POP3 PROXY CONFIGURATION  
# =============================================================================
# Proxy POP3 connections across multiple backend servers with load balancing.

[servers.pop3_proxy]
start = true                                                              # Enable/disable POP3-proxy server.
addr = ":1110"                                                            # Proxy listen address.
remote_addrs = ["backend1.example.com:110", "backend2.example.com:110"]   # Backend server addresses.
max_connections = 1000                                                    # Maximum concurrent connections to the proxy.
max_connections_per_ip = 20                                               # Maximum connections per client IP to the proxy.
master_sasl_username = "proxyuser"                                        # Master username for authenticating to backends.
master_sasl_password = "proxypass"                                        # Master password for authenticating to backends.

# --- TLS AND BEHAVIOR CONFIGURATION ---
tls = false                       # Enable TLS for client-to-proxy connections.
tls_cert_file = ""                # TLS certificate file for proxy server.
tls_key_file = ""                 # TLS private key file for proxy server.
tls_verify = true                 # Verify client certificates (mutual TLS).
remote_tls = false                # Enable TLS for proxy-to-backend connections.
remote_tls_verify = true          # Verify backend server certificates.
remote_use_proxy_protocol = true
remote_use_xclient = false        # Send POP3 XCLIENT command with client info to backends.
connect_timeout = "30s"           # Connection timeout for backend servers.
session_timeout = "10m"           # Maximum session duration.
enable_affinity = true            # Enable user-server affinity (sticky sessions).
affinity_validity = "24h"         # How long to remember user-server affinity.
affinity_stickiness = 0.9         # Probability (0.0-1.0) of sticking to the preferred server.

# --- AUTHENTICATION RATE LIMITING ---
# Same anti-brute-force protection as IMAP (see IMAP section for details)

[servers.pop3_proxy.auth_rate_limit]
enabled = false
max_attempts_per_ip = 10
max_attempts_per_username = 5
ip_window_duration = "15m"
username_window_duration = "30m"
cleanup_interval = "5m"
fast_block_threshold = 10
fast_block_duration = "5m"
delay_start_threshold = 2
initial_delay = "2s"
max_delay = "30s"
delay_multiplier = 2.0

# --- ENHANCED CACHE AND DATABASE SETTINGS ---
cache_cleanup_interval = "1m"   # How often to clean up expired in-memory cache entries (fast blocks, delays).
db_sync_interval = "30s"        # How often to sync batched auth attempts to the database.
max_pending_batch = 100         # Max pending auth attempts before forcing a DB sync.
db_error_threshold = "1m"       # Time to wait before retrying DB operations after an error.

# --- DATABASE-DRIVEN USER ROUTING (PRELOOKUP) ---
# Advanced feature for routing users to specific backend servers based on database queries.
# Same configuration as IMAP proxy - see IMAP proxy section for detailed explanations.

[servers.pop3_proxy.prelookup]
# Enable/disable database-driven user routing for POP3 proxy
enabled = false
hosts = ["localhost"]
port = 5432
user = "postgres"
password = ""
name = "routing_db"
tls = false
max_conns = 10
min_conns = 2
max_conn_lifetime = "1h"
max_conn_idle_time = "30m"
cache_ttl = "10m"
cache_size = 10000
auth_method = "bcrypt"
query = "SELECT password_hash, server_address FROM user_routing WHERE email = $1 AND active = true" # REQUIRED if prelookup is enabled.
fallback_to_default = true
remote_tls = false
remote_tls_verify = true
# remote_port = 110
remote_use_proxy_protocol = true
remote_use_xclient = false       # Send POP3 XCLIENT command with client info to prelookup backends.


# MANAGESIEVE PROXY CONFIGURATION
# =============================================================================
# Proxy ManageSieve connections across multiple backend servers.

[servers.managesieve_proxy]
start = true                                                                # Enable/disable ManageSieve proxy.
addr = ":14190"                                                           # Proxy listen address.
remote_addrs = ["backend1.example.com:4190", "backend2.example.com:4190"]   # Backend server addresses.
max_connections = 500                                                       # Maximum concurrent connections to the proxy.
max_connections_per_ip = 10                                                 # Maximum connections per client IP to the proxy.
master_sasl_username = "proxyuser"                                        # Master username for authenticating to backends.
master_sasl_password = "proxypass"                                        # Master password for authenticating to backends.

# --- TLS AND BEHAVIOR CONFIGURATION ---
tls = false                       # Enable TLS for client-to-proxy connections.
tls_cert_file = ""                # TLS certificate file for proxy server.
tls_key_file = ""                 # TLS private key file for proxy server.
tls_verify = true                 # Verify client certificates (mutual TLS).
remote_tls = false                # Enable TLS for proxy-to-backend connections.
remote_tls_verify = true          # Verify backend server certificates.
remote_use_proxy_protocol = true
remote_use_xclient = false        # Send ManageSieve XCLIENT command with client info to backends.
connect_timeout = "30s"           # Connection timeout for backend servers.
session_timeout = "15m"           # Maximum session duration.
enable_affinity = true            # Enable user-server affinity (sticky sessions).
affinity_validity = "24h"         # How long to remember user-server affinity.
affinity_stickiness = 0.9         # Probability (0.0-1.0) of sticking to the preferred server.

# --- AUTHENTICATION RATE LIMITING ---
# Same anti-brute-force protection as other protocols

[servers.managesieve_proxy.auth_rate_limit]
enabled = false
max_attempts_per_ip = 10
max_attempts_per_username = 5
ip_window_duration = "15m"
username_window_duration = "30m"
cleanup_interval = "5m"
fast_block_threshold = 10
fast_block_duration = "5m"
delay_start_threshold = 2
initial_delay = "2s"
max_delay = "30s"
delay_multiplier = 2.0

# --- ENHANCED CACHE AND DATABASE SETTINGS ---
cache_cleanup_interval = "1m"   # How often to clean up expired in-memory cache entries (fast blocks, delays).
db_sync_interval = "30s"        # How often to sync batched auth attempts to the database.
max_pending_batch = 100         # Max pending auth attempts before forcing a DB sync.
db_error_threshold = "1m"       # Time to wait before retrying DB operations after an error.

# --- DATABASE-DRIVEN USER ROUTING (PRELOOKUP) ---
# Advanced feature for routing users to specific backend servers based on database queries.
# Same configuration as IMAP proxy - see IMAP proxy section for detailed explanations.

[servers.managesieve_proxy.prelookup]
# Enable/disable database-driven user routing for ManageSieve proxy
enabled = false
hosts = ["localhost"]
port = 5432
user = "postgres"
password = ""
name = "routing_db"
tls = false
max_conns = 10
min_conns = 2
max_conn_lifetime = "1h"
max_conn_idle_time = "30m"
cache_ttl = "10m"
cache_size = 10000
auth_method = "bcrypt"
query = "SELECT password_hash, server_address FROM user_routing WHERE email = $1 AND active = true" # REQUIRED if prelookup is enabled.
fallback_to_default = true
remote_tls = false
remote_tls_verify = true
# remote_port = 4190
remote_use_proxy_protocol = true
remote_use_xclient = false       # Send ManageSieve XCLIENT command with client info to backends.


# LMTP PROXY CONFIGURATION
# =============================================================================
# Proxy LMTP connections for mail delivery load balancing.

[servers.lmtp_proxy]
start = true                                                          # Enable/disable LMTP proxy.
addr = ":124"                                                         # Proxy listen address.
remote_addrs = ["backend1.example.com:24", "backend2.example.com:24"] # Backend server addresses.
max_connections = 1000                                                # Maximum concurrent connections to the proxy.
max_connections_per_ip = 0                                            # Maximum connections per client IP (0 = unlimited, for trusted MTAs).

# --- TLS AND BEHAVIOR CONFIGURATION ---
tls = false                       # Enable TLS for client-to-proxy connections.
tls_cert_file = ""                # TLS certificate file for proxy server.
tls_key_file = ""                 # TLS private key file for proxy server.
tls_verify = true                 # Verify client certificates (mutual TLS).
remote_tls = false                # Enable TLS for proxy-to-backend connections.
remote_tls_verify = true          # Verify backend server certificates.
remote_use_proxy_protocol = true
remote_use_xclient = false        # Send LMTP XCLIENT command with client info to backends.
connect_timeout = "30s"           # Connection timeout for backend servers.
session_timeout = "5m"            # Maximum session duration.
max_message_size = "50mb"         # Maximum message size announced by the proxy. Should match backends.
enable_affinity = true            # User-server affinity for consistent delivery.
affinity_validity = "24h"         # How long to remember user-server affinity.
affinity_stickiness = 0.9         # Probability (0.0-1.0) of sticking to the preferred server.

# --- DATABASE-DRIVEN USER ROUTING (PRELOOKUP) ---
# Advanced feature for routing users to specific backend servers based on database queries.
# Same configuration as IMAP proxy - see IMAP proxy section for detailed explanations.

[servers.lmtp_proxy.prelookup]
# Enable/disable database-driven user routing for LMTP proxy
enabled = false
hosts = ["localhost"]
port = 5432
user = "postgres"
password = ""
name = "routing_db"
tls = false
max_conns = 10
min_conns = 2
max_conn_lifetime = "1h"
max_conn_idle_time = "30m"
cache_ttl = "10m"
cache_size = 10000
auth_method = "bcrypt"
query = "SELECT password_hash, server_address FROM user_routing WHERE email = $1 AND active = true" # REQUIRED if prelookup is enabled.
fallback_to_default = true
remote_tls = false
remote_tls_verify = true
# remote_port = 24
remote_use_proxy_protocol = true
remote_use_xclient = false       # Send LMTP XCLIENT command with client info to prelookup backends.


# PROMETHEUS METRICS CONFIGURATION
# =============================================================================
# Prometheus metrics endpoint for monitoring Sora mail server performance,
# connections, errors, and operational health across all protocols.

[servers.metrics]
enabled = false                 # Enable/disable Prometheus metrics HTTP endpoint.
addr = ":8080"                  # Listen address and port for metrics HTTP server.
path = "/metrics"               # HTTP endpoint path for metrics.

# --- USER AND DOMAIN METRICS CONFIGURATION ---
# Track user and domain-level activity for identifying heavy usage patterns
enable_domain_metrics = true    # Enable domain-level metrics (low cardinality, recommended).
enable_user_metrics = false     # Enable user-level metrics (CAUTION: high cardinality, for small deployments).
user_metrics_threshold = 1000   # Track users individually if they exceed this command/connection count.
max_tracked_users = 1000        # Cardinality limit for individually tracked users.
hash_usernames = true           # Hash usernames in metrics for privacy.

# For a full list of available metrics, see the documentation.


# CONNECTION TRACKING CONFIGURATION
# =============================================================================
# Monitor and log active connections across all servers for operational visibility.

[servers.connection_tracking]
enabled = true                    # Enable connection tracking across all protocols.
update_interval = "15s"           # How often to update connection statistics in the database.
termination_poll_interval = "30s" # How often to check for connections marked for termination.
batch_updates = true              # Batch multiple connection updates together for efficiency.
persist_to_db = true              # Store connection tracking information in the database.


# HTTP API SERVER CONFIGURATION
# =============================================================================
# REST API server for administrative operations, exposing sora-admin functionality
# via HTTP endpoints for programmatic access and integration.

[servers.http_api]
start = false                   # Enable/disable HTTP API server.
addr = ":8080"                  # Listen address and port for HTTP API server.
api_key = ""                    # API authentication key (Bearer token). REQUIRED if API is enabled.
allowed_hosts = []              # List of allowed client hosts/networks. Empty = all hosts (not recommended).

# --- TLS/SSL CONFIGURATION ---
# Transport Layer Security for encrypted HTTP API connections
tls = false                   # Enable TLS for HTTP API server (HTTPS).
tls_cert_file = ""            # TLS certificate file path (required if tls=true).
tls_key_file = ""             # TLS private key file path (required if tls=true).
tls_verify = false            # Verify client certificates (mutual TLS).

# For a full list of available API endpoints, see the documentation.
