# SORA MAIL SERVER - CONFIGURATION FILE
# =============================================================================
# 
# This is the main configuration file for Sora, a hackable IMAP server built
# with Go and PostgreSQL. This file contains all available configuration
# options with detailed explanations and examples.
#
# IMPORTANT: 
# - Copy this file to config.toml and modify the values for your deployment
# - All sections and options are documented with their default values
# - Duration values accept Go duration format: "1h", "30m", "5s", "100ms"
# - Size values accept common suffixes: "1gb", "100mb", "5kb"

log_output = "stderr"         # Log destination. Options: "stderr", "stdout", "syslog", or "/path/to/file.log".


# DATABASE CONFIGURATION
# =============================================================================
# PostgreSQL database connection settings with read/write split support.
# Sora requires PostgreSQL with the pg_trgm extension for full-text search.

[database]
log_queries = false             # Enable SQL query logging. Useful for debugging, but impacts performance.
query_timeout = "30s"           # Default timeout for all database queries (e.g., "30s", "1m").
search_timeout = "1m"           # Specific timeout for complex search queries (e.g., "60s", "2m").
write_timeout = "15s"           # Timeout for write operations (INSERT, UPDATE, DELETE).


# WRITE DATABASE CONFIGURATION
# =============================================================================
# Primary database endpoint for all write operations (INSERT, UPDATE, DELETE).

[database.write]
hosts = ["localhost"]         # Database server hosts. Can be ["host:port"] or multiple for failover.
port = 5432                   # Database port. Alternative to including it in hosts.
user = "postgres"             # Database username for authentication.
password = ""                 # Database user password. Leave empty for no password.
name = "sora_mail_db"         # Database name to connect to.
tls = false                   # Enable TLS/SSL for database connection. Recommended for remote connections.

# --- WRITE DATABASE CONNECTION POOL SETTINGS ---
# Fine-tune write database connection management for optimal performance.
max_conns = 50                  # Maximum connections in the write pool. Should be < PostgreSQL max_connections.
min_conns = 5                   # Minimum connections maintained in write pool (kept alive always).
max_conn_lifetime = "1h"        # Maximum lifetime before write connection refresh (prevents stale connections).
max_conn_idle_time = "30m"      # Maximum idle time before closing excess write connections (above min_conns).
query_timeout = "30s"           # Per-endpoint timeout for individual database queries (e.g., "30s").


# READ DATABASE CONFIGURATION
# =============================================================================
# Read replica database endpoint(s) for SELECT operations. Can specify multiple
# hosts for load balancing across read replicas. If not configured, read
# operations will use the write database connection pool.

[database.read]
hosts = ["localhost"]         # Database server hosts for read operations. Can specify multiple for load balancing.
port = 5432                   # Database port for read operations.
user = "postgres"             # Database username for read operations.
password = ""                 # Database user password for read operations.
name = "sora_mail_db"         # Database name for read operations (typically same as write).
tls = false                   # Enable TLS/SSL for read database connections.

# --- READ DATABASE CONNECTION POOL SETTINGS ---
# Fine-tune read database connection management for optimal performance.
max_conns = 100                 # Maximum connections in the read pool. Can be higher than write pool.
min_conns = 10                  # Minimum connections maintained in read pool.
max_conn_lifetime = "1h"        # Maximum lifetime before read connection refresh.
max_conn_idle_time = "30m"      # Maximum idle time before closing excess read connections.
query_timeout = "30s"           # Per-endpoint timeout for individual database queries (e.g., "30s").


# S3-COMPATIBLE OBJECT STORAGE CONFIGURATION  
# =============================================================================
# Sora stores message bodies in S3-compatible object storage for scalability
# and durability. Message metadata remains in PostgreSQL for fast access.

[s3]
endpoint = "s3.amazonaws.com"           # S3-compatible storage endpoint URL (e.g., "s3.amazonaws.com", "minio.example.com:9000").
disable_tls = false                     # Disable TLS for S3 endpoint. Useful for local MinIO setups.
access_key = "YOUR_S3_ACCESS_KEY_HERE"  # S3 access key ID for authentication.
secret_key = "YOUR_S3_SECRET_KEY_HERE"  # S3 secret access key for authentication.
bucket = "your-sora-mail-bucket"        # S3 bucket name for storing message bodies. Must be globally unique.
trace = false                           # Enable detailed S3 request/response tracing. Impacts performance.

# --- CLIENT-SIDE ENCRYPTION SETTINGS ---
# Encrypt message bodies before uploading to S3 for additional security
encrypt = false                                                                    # Enable client-side encryption. Messages are encrypted before S3 upload.
encryption_key = "0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef" # 32-byte master encryption key (64 hex chars). CRITICAL: Store securely! Gen: openssl rand -hex 32


# LOCAL CACHE CONFIGURATION
# =============================================================================
# Local filesystem cache for frequently accessed message bodies, reducing
# S3 API calls and improving performance for recently accessed messages.

[local_cache]
path = "/tmp/sora/cache"      # Filesystem path for cache storage. Must be writable. Fast storage (SSD) recommended.
capacity = "1gb"              # Maximum total cache size (e.g., "100mb", "1gb"). LRU eviction when exceeded.
max_object_size = "5mb"       # Maximum size for individual cached objects. Prevents large messages from dominating cache.
metrics_interval = "5m"       # How often cache hit/miss ratios are stored in the database.
metrics_retention = "30d"     # How long to retain cache metrics in the database.
purge_interval = "12h"        # How often to run cache cleanup (capacity enforcement, stale entry removal).
orphan_cleanup_age = "30d"    # Minimum age before orphaned cache entries (for deleted DB messages) are removed.

# --- CACHE WARMUP ---
# Preload recent messages when users reconnect to improve performance.
enable_warmup = true          # Enable cache warmup on user login.
warmup_message_count = 50     # Number of recent messages to preload per mailbox.
warmup_mailboxes = ["INBOX"]  # Mailboxes to warm up. Most clients check INBOX first. e.g., ["INBOX", "Sent"].
warmup_async = true           # true: warmup happens in background (fast login). false: blocks login.
warmup_timeout = "5m"         # Maximum time allowed for a cache warmup operation.


# S3 UPLOADER CONFIGURATION
# =============================================================================
# Background worker that handles asynchronous uploads of message bodies
# to S3 storage after messages are initially stored locally.

[uploader]
path = "/tmp/sora/uploads"    # Filesystem path for staging uploads (temporary storage before S3).
batch_size = 20               # Number of messages batched together per upload operation.
concurrency = 10              # Number of concurrent upload workers.
max_attempts = 5              # Maximum retry attempts for failed uploads.
retry_interval = "30s"        # Initial delay between retry attempts (exponential backoff is applied).


# CLEANUP PROCESS CONFIGURATION
# =============================================================================
# Background worker that manages message lifecycle and removes old/deleted
# messages according to configured retention policies.

[cleanup]
grace_period = "14d"          # Recovery window for accidentally deleted messages before permanent removal.
wake_interval = "1h"          # How often the cleanup worker runs.
max_age_restriction = ""      # Max message age before auto-expungement. Empty = no limit. e.g., "90d", "365d".
fts_retention = "730d"        # How long to keep full-text search content in DB. Older messages lose searchability.
auth_attempts_retention = "7d"  # How long to retain authentication attempt logs in the database.
health_status_retention = "30d" # How long to retain health status history in the database.


# GLOBAL SERVERS CONFIGURATION
# =============================================================================
# Global settings that apply to all protocol servers.

[servers]
# Note: Debug logging is now configured per-server using the 'debug' option on individual servers

# --- TRUSTED NETWORKS ---
# Networks trusted for proxy parameter forwarding (XCLIENT, ID commands, etc.)
# These networks can forward client information through proxy protocols
trusted_networks = ["127.0.0.0/8", "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]


# DYNAMIC SERVER CONFIGURATION
# =============================================================================
# Sora now uses a dynamic server configuration system that allows you to define
# multiple servers of any type with individual configurations. Each server is
# defined as a [[server]] section with a unique name and configuration.
#
# Server Types:
# - imap: IMAP4rev1 server for email access
# - lmtp: Local Mail Transfer Protocol for mail delivery  
# - pop3: POP3 server for email download
# - managesieve: ManageSieve server for SIEVE script management
# - imap_proxy: IMAP proxy server for load balancing
# - pop3_proxy: POP3 proxy server for load balancing
# - managesieve_proxy: ManageSieve proxy server for load balancing
# - lmtp_proxy: LMTP proxy server for load balancing
# - metrics: Prometheus metrics HTTP endpoint
# - http_api: REST API server for administrative operations
#
# IMPORTANT: You must configure at least one server for Sora to start.

# IMAP SERVER EXAMPLE
# =============================================================================
# Internet Message Access Protocol - primary protocol for email access
# Supports IMAP4rev1 with IDLE extension for real-time notifications.

[[server]]
type = "imap"
name = "main-imap"            # Unique server name for identification
addr = ":143"                 # Listen address and port. Use :993 for IMAPS.
debug = false                 # Enable debug logging for this IMAP server

# --- CONNECTION LIMITING AND MEMORY MANAGEMENT ---
max_connections = 1000        # Maximum concurrent IMAP connections across all clients.
max_connections_per_ip = 10   # Max connections per client IP. Set to 0 if behind a load balancer.

# --- IMAP-SPECIFIC CONFIGURATION ---
append_limit = "25mb"         # Maximum message size for IMAP APPEND. Empty = no limit.

# --- MASTER USER AUTHENTICATION ---
master_username = ""          # Master username for administrative IMAP access (e.g., for proxies).
master_password = ""          # Password for master_username.
master_sasl_username = ""     # Alternative master username for SASL authentication.
master_sasl_password = ""     # Password for master_sasl_username.

# --- TLS/SSL CONFIGURATION ---
tls = false                               # Enable TLS for IMAP (IMAPS). Typically on port 993.
tls_cert_file = "/path/to/your/imap.crt"  # TLS certificate file path (required if tls=true).
tls_key_file = "/path/to/your/imap.key"   # TLS private key file path (required if tls=true).
tls_verify = true                         # Verify client certificates (mutual TLS). Usually false.

# --- PROXY PROTOCOL CONFIGURATION ---
# Enable if this server is behind a load balancer or reverse proxy
proxy_protocol = false            # Enable PROXY protocol support (HAProxy, nginx, etc.)
proxy_protocol_timeout = "5s"     # Timeout for reading PROXY protocol headers

# --- CLIENT CAPABILITY FILTERS ---
# Disable specific IMAP capabilities for problematic clients based on their ID
# This helps work around client bugs while maintaining full functionality for well-behaved clients
# Note: CAPABILITY response still shows all capabilities, but command handlers respect filtering

# [[server.client_filters]]
# client_name = "com\\.apple\\.email\\.maild"  # iOS Apple Mail (regex pattern)
# client_version = ".*"                        # Any version
# disable_caps = ["CONDSTORE"]                 # Capabilities to disable
# reason = "iOS Apple Mail has CONDSTORE implementation issues"

# [[server.client_filters]]
# client_name = "Microsoft Outlook"            # Outlook for Windows/Mac
# client_version = "16\\..*"                   # Only version 16.x
# disable_caps = ["IDLE", "CONDSTORE"]         # Multiple capabilities
# reason = "Outlook 16.x has connection issues with IDLE and CONDSTORE"

# --- AUTHENTICATION RATE LIMITING ---
[server.auth_rate_limit]
enabled = false                   # Enable authentication rate limiting.
max_attempts_per_ip = 10          # Max failed auth attempts per IP address.
max_attempts_per_username = 5     # Max failed auth attempts per username (across all IPs).
ip_window_duration = "15m"        # Time window for IP-based rate limiting.
username_window_duration = "30m"  # Time window for username-based rate limiting.
cleanup_interval = "5m"           # How often to clean up expired rate limiting data.
fast_block_threshold = 10         # Failed attempts before immediate IP blocking.
fast_block_duration = "5m"        # Duration of the fast IP block.
delay_start_threshold = 2         # Failed attempts before applying authentication delays.
initial_delay = "2s"              # Initial authentication delay after threshold is reached.
max_delay = "30s"                 # Maximum authentication delay.
delay_multiplier = 2.0            # Multiplier for progressive delay (exponential backoff).
cache_cleanup_interval = "1m"     # How often to clean up expired in-memory cache entries.
db_sync_interval = "30s"          # How often to sync batched auth attempts to the database.
max_pending_batch = 100           # Max pending auth attempts before forcing a DB sync.
db_error_threshold = "1m"         # Time to wait before retrying DB operations after an error.


# LMTP SERVER EXAMPLE
# =============================================================================
# Local Mail Transfer Protocol - handles incoming mail delivery from MTAs

[[server]]
type = "lmtp"
name = "main-lmtp"
addr = ":24"
debug = true                  # Enable debug logging for LMTP server
max_connections = 500
max_connections_per_ip = 5
external_relay = ""           # External SMTP relay for mail forwarding (optional).
tls = false
tls_use_starttls = false      # Use STARTTLS for opportunistic encryption.
tls_cert_file = "/path/to/your/lmtp.crt"
tls_key_file = "/path/to/your/lmtp.key"
tls_verify = true
proxy_protocol = false        # Enable PROXY protocol support for LMTP
proxy_protocol_timeout = "5s"


# POP3 SERVER EXAMPLE
# =============================================================================
# Post Office Protocol version 3 - legacy protocol for downloading email

[[server]]
type = "pop3"
name = "main-pop3"
addr = ":110"                 # Use :995 for POP3S.
max_connections = 500
max_connections_per_ip = 5
master_sasl_username = ""
master_sasl_password = ""
tls = false
tls_cert_file = "/path/to/your/pop3.crt"
tls_key_file = "/path/to/your/pop3.key"
tls_verify = false
proxy_protocol = false        # Enable PROXY protocol support for POP3
proxy_protocol_timeout = "5s"

# --- AUTHENTICATION RATE LIMITING ---
# Same configuration available as shown in IMAP example above
# [server.auth_rate_limit]
# enabled = false


# MANAGESIEVE SERVER EXAMPLE
# =============================================================================
# ManageSieve protocol for managing SIEVE mail filtering scripts

[[server]]
type = "managesieve"
name = "main-managesieve"
addr = ":4190"
max_connections = 200
max_connections_per_ip = 3
max_script_size = "16kb"      # Maximum size for a SIEVE script.
supported_extensions = ["fileinto", "vacation", "envelope", "regex"]  # Supported SIEVE extensions. Available: envelope, fileinto, redirect, encoded-character, imap4flags, variables, relational, vacation, copy, regex
insecure_auth = false                            # Allow plaintext auth. SECURITY: Should be false in production.
master_sasl_username = ""
master_sasl_password = ""
tls = false
tls_use_starttls = false
tls_cert_file = "/path/to/your/managesieve.crt"
tls_key_file = "/path/to/your/managesieve.key"
tls_verify = true
proxy_protocol = false        # Enable PROXY protocol support for ManageSieve
proxy_protocol_timeout = "5s"

# --- AUTHENTICATION RATE LIMITING ---
# Same configuration available as shown in IMAP example above
# [server.auth_rate_limit]
# enabled = false


# IMAP PROXY EXAMPLE
# =============================================================================
# Proxy IMAP connections across multiple backend servers with load balancing

[[server]]
type = "imap_proxy"
name = "imap-proxy-1"
addr = ":1143"                # Proxy listen address. Must be different from backend IMAP port.
remote_addrs = ["backend1.example.com:143", "backend2.example.com:143", "backend3.example.com:143"]
max_connections = 2000
max_connections_per_ip = 50
master_sasl_username = "proxyuser"
master_sasl_password = "proxypass"

# --- PROXY TLS CONFIGURATION ---
tls = false
tls_cert_file = ""
tls_key_file = ""
tls_verify = true

# --- BACKEND TLS CONFIGURATION ---
remote_tls = false
remote_tls_verify = true
remote_use_proxy_protocol = true
remote_use_id_command = false

# --- PROXY BEHAVIOR CONFIGURATION ---
connect_timeout = "30s"
session_timeout = "30m"
enable_affinity = true
affinity_validity = "24h"
affinity_stickiness = 0.9     # Probability (0.0-1.0) of sticking to the preferred server.

# --- AUTHENTICATION RATE LIMITING ---
# Same configuration available as shown in IMAP example above
# [server.auth_rate_limit]
# enabled = false

# --- DATABASE-DRIVEN USER ROUTING (PRELOOKUP) ---
# Advanced feature for routing users to specific backend servers based on database queries.
[server.prelookup]
enabled = false               # Enable/disable database-driven user routing.
hosts = ["localhost"]
port = 5432
user = "postgres"
password = ""
name = "routing_db"
tls = false
max_conns = 10
min_conns = 2
max_conn_lifetime = "1h"
max_conn_idle_time = "30m"
cache_ttl = "10m"
cache_size = 10000
auth_method = "bcrypt"
query = "SELECT password_hash, server_address FROM user_routing WHERE email = $1 AND active = true"
fallback_to_default = true
remote_tls = false
remote_tls_verify = true
# remote_port = 143
remote_use_proxy_protocol = true
remote_use_id_command = false


# METRICS SERVER EXAMPLE
# =============================================================================
# Prometheus metrics endpoint for monitoring Sora performance

[[server]]
type = "metrics"
name = "prometheus-metrics"
addr = ":9090"
path = "/metrics"             # HTTP endpoint path for metrics.
enable_domain_metrics = true
enable_user_metrics = false  # CAUTION: high cardinality, for small deployments only.
user_metrics_threshold = 1000
max_tracked_users = 1000
hash_usernames = true


# HTTP API SERVER EXAMPLE
# =============================================================================
# REST API server for administrative operations

[[server]]
type = "http_api"
name = "admin-api"
addr = ":8080"
api_key = "your-secret-api-key-here"  # REQUIRED for API access.
allowed_hosts = []            # Empty = all hosts (not recommended for production).
tls = false
tls_cert_file = ""
tls_key_file = ""
tls_verify = false
proxy_protocol = false        # Enable PROXY protocol support for HTTP API
proxy_protocol_timeout = "5s"

# CONNECTION TRACKING CONFIGURATION
# =============================================================================
# Monitor and log active connections across all servers for operational visibility.

[servers.connection_tracking]
enabled = true                    # Enable connection tracking across all protocols.
update_interval = "15s"           # How often to update connection statistics in the database.
termination_poll_interval = "30s" # How often to check for connections marked for termination.
batch_updates = true              # Batch multiple connection updates together for efficiency.
persist_to_db = true              # Store connection tracking information in the database.